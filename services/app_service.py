
import logging
from typing import Optional, Dict, List, Tuple
from data_manager import DataManager
from services.link_service import LinkService
from services.subscription_service import SubscriptionService
from telebot.types import User as TeleUser 
import telebot 

logger = logging.getLogger(__name__)

class AppService:
    def __init__(self, data_manager: DataManager, link_service: LinkService, sub_service: SubscriptionService):
        self.data_manager = data_manager
        self.link_service = link_service
        self.sub_service = sub_service

    def handle_start_command(self, tele_user: TeleUser, chat_id: int) -> str:
        self.data_manager.get_or_create_user(tele_user.id, chat_id, tele_user.first_name, tele_user.username)
        button_add_tracking_text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"
        button_my_links_text = 'üìö –ú–æ–∏ —Å—Å—ã–ª–∫–∏'
        button_instruction_text = "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
        button_support_text = "üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        button_subscription_text = "üí≥ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ"
        
        return ("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n\n"
                "*–ö–æ–º–∞–Ω–¥—ã:*\n"
                "/add *<—Å—Å—ã–ª–∫–∞>* - –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É)\n"
                "/mylinks - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "/remove *<–Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏>* - –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/alias *<–Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏> <–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞>* - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏\n"
                "/donate - –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–µ–Ω–µ–≥üíï\n\n"
                "*–ö–Ω–æ–ø–∫–∏:*\n"
                f"üìå *{button_add_tracking_text}* - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é RSS-—Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
                f"üìå *{button_my_links_text}* - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫ (–∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /mylinks).\n"
                f"üìå *{button_instruction_text}* - –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.\n"
                f"üìå *{button_support_text}* - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n"
                f"üìå *{button_subscription_text}* - –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–µ–Ω–µ–≥.\n"
                )

    def handle_add_link(self, tele_user: TeleUser, chat_id: int, url_to_add: str) -> str:
        self.data_manager.get_or_create_user(tele_user.id, chat_id, tele_user.first_name, tele_user.username)
        
        normalized_url = self.link_service.normalize_url(url_to_add)
        if not normalized_url:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å URL: {telebot.util.escape(url_to_add)}\\. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞\\."

        self.link_service.add_new_link(normalized_url, url_to_add) 

        if self.sub_service.add_user_subscription(tele_user.id, normalized_url):
            return f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:\n`{telebot.util.escape(normalized_url)}`"
        else:
            subs = self.sub_service.get_user_subscriptions_display(tele_user.id)
            if any(s['normalized_url'] == normalized_url for s in subs):
                 return f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É:\n`{telebot.util.escape(normalized_url)}`"
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å—Å—ã–ª–∫—É:\n`{telebot.util.escape(normalized_url)}`"
    
    def handle_my_links(self, tele_user: TeleUser, chat_id: int) -> str:
        self.data_manager.get_or_create_user(tele_user.id, chat_id, tele_user.first_name, tele_user.username)
        subscriptions_display = self.sub_service.get_user_subscriptions_display(tele_user.id)
        
        if not subscriptions_display:
            return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\\."

        response_lines = ["*–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*"]
        for sub_info in subscriptions_display:
            escaped_display_url = telebot.util.escape(sub_info['display_url'])
            alias_str = ""
            if sub_info.get('alias'):
                escaped_alias = telebot.util.escape(sub_info['alias'])
                alias_str = f" *{escaped_alias}* " 
            response_lines.append(f"{sub_info['index']}\\.{alias_str} `{escaped_display_url}`")
        return "\n".join(response_lines)

    def handle_remove_link(self, tele_user: TeleUser, chat_id: int, argument: str) -> str:
        self.data_manager.get_or_create_user(tele_user.id, chat_id, tele_user.first_name, tele_user.username)
        subscriptions_display = self.sub_service.get_user_subscriptions_display(tele_user.id)

        if not subscriptions_display:
            return "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\\."

        url_to_remove: Optional[str] = None
        display_url_for_message = argument 

        if argument.isdigit():
            try:
                index_to_find = int(argument)
                found_sub = next((s for s in subscriptions_display if s['index'] == index_to_find), None)
                if found_sub:
                    url_to_remove = found_sub['normalized_url']
                    display_url_for_message = found_sub['display_url']
                else:
                    return "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏\\. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ /mylinks\\."
            except ValueError:
                return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å—Å—ã–ª–∫–∏\\."
        else: 
            normalized_arg_url = self.link_service.normalize_url(argument)
            if not normalized_arg_url:
                found_sub_by_display_url = next((s for s in subscriptions_display if s['display_url'] == argument), None)
                if found_sub_by_display_url:
                    url_to_remove = found_sub_by_display_url['normalized_url']
                    display_url_for_message = found_sub_by_display_url['display_url']
                else:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∏–∑ /mylinks\\."
            else: 
                found_sub_by_url = next((s for s in subscriptions_display if s['normalized_url'] == normalized_arg_url), None)
                if found_sub_by_url:
                    url_to_remove = normalized_arg_url
                    display_url_for_message = found_sub_by_url['display_url'] 
                else:
                    return "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–∞–∫—É—é —Å—Å—ã–ª–∫—É\\."
        
        if url_to_remove and self.sub_service.remove_user_subscription(tele_user.id, url_to_remove):
            escaped_display_url = telebot.util.escape(display_url_for_message)
            return f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ `{escaped_display_url}` —É–¥–∞–ª–µ–Ω–∞\\."
        else: 
            if url_to_remove: 
                 return f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ `{telebot.util.escape(display_url_for_message)}`\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\\."
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\\. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ URL –∏–∑ —Å–ø–∏—Å–∫–∞ /mylinks\\."

    def handle_alias_command(self, tele_user: TeleUser, chat_id: int, arguments: List[str]) -> str:
        self.data_manager.get_or_create_user(tele_user.id, chat_id, tele_user.first_name, tele_user.username)
        
        if not (1 <= len(arguments) <= 2):
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/alias <–Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏> <–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞>` –∏–ª–∏ `/alias <–Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏>` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞\\."

        subscription_index_str = arguments[0]
        alias_name: Optional[str] = None
        if len(arguments) == 2:
            alias_name = arguments[1].strip()
            if not alias_name: 
                alias_name = None
            elif len(alias_name) > 50: 
                return "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)\\."
        

        current_subscriptions = self.sub_service.get_user_subscriptions_display(tele_user.id)
        if not current_subscriptions:
            return "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–∏–∞—Å–∞\\."

        if not subscription_index_str.isdigit():
            return "–ù–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ /mylinks\\."
        
        success, norm_url, display_url = self.sub_service.set_alias_for_subscription(
            tele_user.id, 
            subscription_index_str, 
            alias_name, 
            current_subscriptions
        )

        if success and norm_url and display_url:
            escaped_display_url = telebot.util.escape(display_url)
            if alias_name:
                escaped_alias = telebot.util.escape(alias_name)
                return f"–ê–ª–∏–∞—Å '{escaped_alias}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å—Å—ã–ª–∫–∏ `{escaped_display_url}`\\."
            else:
                return f"–ê–ª–∏–∞—Å –¥–ª—è —Å—Å—ã–ª–∫–∏ `{escaped_display_url}` —É–¥–∞–ª–µ–Ω\\."
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞–ª–∏–∞—Å\\. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏ –≤–µ—Ä–Ω—ã–π, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\."